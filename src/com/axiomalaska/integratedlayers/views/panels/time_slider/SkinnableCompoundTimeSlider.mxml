<?xml version="1.0" encoding="utf-8"?>
<ns2:SkinnableCompoundTime
					xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					skinClass="skins.time_slider.CompoundTimeSliderSkin" xmlns:ns="com.axiomalaska.integratedlayers.views.panels.time_slider.*" resize="updateSliders()" xmlns:ns1="views.panels.layer_groups.icons.*"
					width="100%" minHeight="0" 
					visible="{Boolean(slice_layers_collection.length > 0 || bounded_layers_collection.length > 0)}" 
					includeInLayout="{Boolean(sliceActive || boundsActive)}" xmlns:visualscripts="com.blogspot.visualscripts.*" xmlns:timeline="com.axiomalaska.timeline.*" xmlns:axes="com.axiomalaska.timeline.charts.axes.*" xmlns:ns2="com.axiomalaska.integratedlayers.views.panels.time_slider.*" xmlns:ns3="com.axiomalaska.integratedlayers.views.panels.layer_groups.icons.*">
	<fx:Metadata>
		//SKIN STATES
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.axiomalaska.integratedlayers.events.CompoundTimeSliderEvent;
			import com.axiomalaska.integratedlayers.models.presentation_data.TimeData;
			import com.axiomalaska.models.Temporal;
			import com.axiomalaska.crks.dto.Layer;
			import com.axiomalaska.crks.dto.LayerGroup;
			import com.axiomalaska.crks.dto.RasterLayer;
			import com.axiomalaska.crks.dto.VectorLayer;
			import com.axiomalaska.crks.helpers.LayerTypes;
			
			import mx.collections.ArrayCollection;
			import mx.events.SliderEvent;

			
			private var oldSliceVal:Number;
			
			protected function updateSliders():void{
				onSliceSliderChange();
				onBoundsSliderChange();
			}
			
			
			
			protected function onStartSlide():void
			{
				
				_updateValues();
				dispatchEvent(new CompoundTimeSliderEvent(CompoundTimeSliderEvent.COMPLEX_TIME_SLIDER_SLIDING_START,boundedDates,sliceDate));
			}
			
			
			protected function onBoundsSliderChange():void{
				
				if(sliceSlider.value > boundsSlider.thumb2Value){
					sliceSlider.value = boundsSlider.thumb2Value;
				}else if(sliceSlider.value < boundsSlider.thumb1Value){
					sliceSlider.value = boundsSlider.thumb1Value;
				}
				
				onSliderChange();
			}
			
			
			protected function onSliceSliderChange():void{
				
				
				if(sliceSlider.value < boundsSlider.thumb1Value){
					//boundsSlider.setThumbValueAt(0,sliceSlider.value);
					boundsSlider.thumb1Value = sliceSlider.value;
				}else if(sliceSlider.value > boundsSlider.thumb2Value){
					//boundsSlider.setThumbValueAt(1,sliceSlider.value);
					boundsSlider.thumb2Value = sliceSlider.value;
				}
				
				
				
				onSliderChange();
				
			}
			
			
			protected function onSliderChange():void{
				
				_updateValues();
				
			}
			
			protected function onEndBoundsSlide():void{
				
				_updateValues();
				dispatchEvent(new CompoundTimeSliderEvent(CompoundTimeSliderEvent.BOUNDED_TIME_SLIDER_SLIDING_COMPLETE,boundedDates,sliceDate));
				if(sliceSlider.value != oldSliceVal){
					onEndSliceSlide();
				}
				
			}
			
			protected function _updateValues():void{
				if(boundedDates && boundedDates.startdate && boundedDates.enddate){
					
					//have to capture values in variables so that second number set doesn't revert. updating one automatically updates value property, which contains both
					var val0:Number = boundsSlider.thumb1Value;
					var val1:Number = boundsSlider.thumb2Value;
					boundedDates.startdate = new Date(val0);
					boundedDates.enddate = new Date(val1);
				}else if(boundedDates){
					boundedDates.startdate = minDate;
					boundedDates.enddate = maxDate;
					
				}
				
				if(sliceDate){
					sliceDate = new Date(sliceSlider.value);
				}else{
					sliceDate = new Date();
				}
				
				_updateSkinValues();
			}
			
			
			protected function _updateMinMax():void{
				var tempMin:Date;
				var tempMax:Date;
				
				sliceActive = false;
				boundsActive = false;
				
				var all_layers:Array = bounded_layers_collection.source.concat(slice_layers_collection.source);
				
				for each(var layer:Layer in all_layers){
					if(layer.hasTimeComponent){
						if(
							tempMin && layer.startTimeUtc.getTime() < tempMin.getTime() ||
							!tempMin
						){
							tempMin = layer.startTimeUtc;
						}
						
						if(
							tempMax && layer.endTimeUtc.getTime() > tempMax.getTime() ||
							!tempMax
						){
							tempMax = layer.endTimeUtc;
						}
						
						if(layer is VectorLayer){
							boundsActive = true;
						}
						
						if(layer is RasterLayer){
							sliceActive = true;
						}
					}
				}
				
				if(tempMin){
					minDate = tempMin;
				}
				if(tempMax){
					maxDate = tempMax;
				}

			}
			
			protected function _updateSkinValues():void{
				try{
					sliceX= sliceSlider.x + sliceSlider.getThumbAt(0).x +(sliceSlider.getThumbAt(0).width/2);
					//boundedLowX = boundsSlider.x + boundsSlider.getThumbAt(0).x + (boundsSlider.getThumbAt(0).width/2);	
					//boundedWidth = boundsSlider.x + boundsSlider.getThumbAt(1).x + (boundsSlider.getThumbAt(1).width/2) - boundedLowX;
					boundedLowX = 110 + boundsSlider.thumb1.x + boundsSlider.thumb1.width/2;
					boundedWidth = 110 + boundsSlider.thumb2.x + boundsSlider.thumb2.width/2 - boundedLowX;
				}catch($err:Error){
					trace('Caught error.. ' + $err.message);
				}
				
			}
			
			protected function onEndSliceSlide():void{
				
				sliceDate = new Date(sliceSlider.value);
				dispatchEvent(new CompoundTimeSliderEvent(CompoundTimeSliderEvent.SLICE_TIME_SLIDER_SLIDING_COMPLETE,boundedDates,sliceDate));
				oldSliceVal = sliceSlider.value;

			}
			
			protected function vectorRenderer($item:Layer):ClassFactory{
				if($item.hasTimeComponent){
					return new ClassFactory(VectorTimeControlRenderer);
				}
				return new ClassFactory();
			}
			
			protected function onTimeLayerChange():void{
				bounded_layers_collection.refresh();
				slice_layers_collection.refresh();
				_updateMinMax();
				_updateValues();
				//bounded_layers_collection.refresh();
				//slice_layers_collection.refresh();
				
			}
			
			[Bindable]
			public var bounded_layers_collection:ArrayCollection;
			

			[Bindable]
			public var slice_layers_collection:ArrayCollection;
			
			[Bindable]
			public var collapsed:Boolean = false;
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		
	</fx:Declarations>
	
	<ns:boundsSliderContent>
		<s:HGroup width="100%" verticalAlign="middle" visible="{boundsActive}" includeInLayout="{boundsActive}" show="updateSliders()" hide="updateSliders()" updateComplete="updateSliders()">
			<s:HGroup width="100" verticalAlign="middle">
				<ns3:LayerTypeTimeIcon layer_type="{LayerTypes.VECTOR_LAYER_TYPE}" />
				<s:Label maxDisplayedLines="1" fontSize="11" fontWeight="bold" color="0xFFFFFF" text="Vector" />
			</s:HGroup>
			<s:VGroup width="100%" paddingLeft="10" paddingRight="10" verticalAlign="middle">
				<visualscripts:IntervalSlider 
					id="boundsSlider" 
					width="100%" height="20" snapInterval="0" liveDragging="true"
					minimum="{minDate.getTime()}" maximum="{maxDate.getTime()}"
					thumb1Value="{boundedDates.startdate.getTime()}" thumb2Value="{boundedDates.enddate.getTime()}"
					thumbPress="onStartSlide()" thumbRelease="onEndBoundsSlide()" change="onBoundsSliderChange();" updateComplete="_updateSkinValues();"
					/>
				<!--<timeline:SkinnableTimeline styleName="main" startdate="{boundedDates.startdate}" enddate="{boundedDates.enddate}" width="100%" height="20" />-->
			</s:VGroup>
			<!-- thumbPress="onStartSlide()" thumbRelease="onEndBoundsSlide()" change="onBoundsSliderChange();" updateComplete="_updateSkinValues();" -->
			<!-- showTrackHighlight="true" -->
			<!--
			<ns:TimeSlider 
				id="boundsSlider"
				width="100%" buttonMode="true"
				thumbSkin="@Embed(source='E:/flex/SwizIntegratedMap/src/assets/images/carrot_down_red.png')"
				thumbCount="2"
				values="{[
					(boundedDates.startdate ? boundedDates.startdate.getTime() : 0),
					(boundedDates.enddate ? boundedDates.enddate.getTime() : 0)
				]}" 
				minimum="{minDate.getTime()}" maximum="{maxDate.getTime()}"
				thumbPress="onStartSlide()" thumbRelease="onEndBoundsSlide()" change="onBoundsSliderChange();" updateComplete="_updateSkinValues();"
				/>
			-->
			
			
			
			
			
			
		</s:HGroup>
	</ns:boundsSliderContent>


	<ns:boundedContent>
		<!-- alternatingItemColors="[0x333333,0x363636]" -->
		<s:VGroup width="100%" visible="{boundsActive}" includeInLayout="{boundsActive}">
			<s:DataGroup width="100%" dataProvider="{bounded_layers_collection}"
						 itemRenderer="com.axiomalaska.integratedlayers.views.panels.time_slider.VectorTimeControlRenderer" 
						 rendererAdd="onTimeLayerChange()" rendererRemove="onTimeLayerChange()">
				<s:layout>
					<s:VerticalLayout gap="1"  />
				</s:layout>
			</s:DataGroup>
		</s:VGroup>
	</ns:boundedContent>

	
	<ns:sliceContent>
		<s:VGroup width="100%" visible="{sliceActive}" includeInLayout="{sliceActive}">
			<s:DataGroup width="100%" dataProvider="{slice_layers_collection}"
						 itemRenderer="com.axiomalaska.integratedlayers.views.panels.time_slider.RasterTimeControlRenderer"
						 rendererAdd="onTimeLayerChange()" rendererRemove="onTimeLayerChange()">
				<s:layout>
					<s:VerticalLayout gap="1" />
				</s:layout>
			</s:DataGroup>
		</s:VGroup>
	</ns:sliceContent>
	
	<ns:sliceSliderContent> 
		<s:HGroup width="100%" visible="{sliceActive}" includeInLayout="{sliceActive}" verticalAlign="middle" show="updateSliders()" hide="updateSliders()" updateComplete="updateSliders()">
			<s:HGroup width="100" verticalAlign="middle">
				<ns3:LayerTypeTimeIcon layer_type="{LayerTypes.RASTER_LAYER_TYPE}" />
				<s:Label maxDisplayedLines="1" fontSize="11" fontWeight="bold" color="0xFFFFFF" text="Raster" />
			</s:HGroup>
			
			<ns2:TimeSlider 
				id="sliceSlider"
				width="100%" buttonMode="true"
				thumbSkin="@Embed(source='E:/flex/SwizIntegratedMap/src/assets/images/carrot_up_red.png')"
				minimum="{minDate ? minDate.getTime() : 0}" maximum="{maxDate ? maxDate.getTime() : 0}" value="{sliceDate.getTime()}"
				thumbPress="onStartSlide()" thumbRelease="onEndSliceSlide()" change="onSliceSliderChange();" updateComplete="_updateSkinValues();"
				/>
		</s:HGroup>
	</ns:sliceSliderContent>
	
	<ns:timeLineContent>
		<s:VGroup styleName="mainTimeline" width="100%" height="100%" paddingLeft="115" paddingRight="8"  visible="{sliceActive || boundsActive}" includeInLayout="{sliceActive || boundsActive}">
			<axes:SkinnableTimeAxis styleName="main" startdate="{minDate}" enddate="{maxDate}" width="100%" height="100%" />
		</s:VGroup>
		
		
	</ns:timeLineContent>
		

	
	
	
</ns2:SkinnableCompoundTime>
