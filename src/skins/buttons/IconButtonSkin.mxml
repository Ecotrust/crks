<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="0" minHeight="0" alpha.disabled="0.5" xmlns:fxg="assets.fxg.*" xmlns:ns="views.panels.layer_groups.icons.*" xmlns:ns1="com.axiomalaska.integratedlayers.views.panels.layer_groups.icons.*">
    <fx:Metadata>[HostComponent("com.axiomalaska.integratedlayers.views.components.buttons.IconButton")]</fx:Metadata>
    
    <!-- host component -->
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
               /*
				var cr:Number = getStyle("cornerRadius");
                
                if (cornerRadius != cr)
                {
                    cornerRadius = cr;
                    shadow.radiusX = cornerRadius;
                    fill.radiusX = cornerRadius;
                    lowlight.radiusX = cornerRadius;
                    highlight.radiusX = cornerRadius;
                    border.radiusX = cornerRadius;
                }
                
                if (highlightStroke) highlightStroke.radiusX = cornerRadius;
                if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
                if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;
                */
				
				
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            private var cornerRadius:Number = 2;
			
			[Bindable]
			private var strokeWeight:int;
			
			[Bindable]
			private var strokeColor:uint = 0x660000;
        ]]>        
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
	
	
	<!-- visible="false" visible.over="true" visible.down="true" showEffect="Fade"-->
	<!--  alpha=".4" alpha.over=".9" alpha.down="1" -->

    <s:Group left="0" right="0" top="0" bottom="0">
		<ns1:LayerTypeGraphic width="100%" height="100%" color="0x006666">
			<fxg:buttonbackground width="100%" height="100%" id="icon" />
		</ns1:LayerTypeGraphic>
		<s:filters>
			<s:DropShadowFilter includeIn="over,down" inner.down="true" strength=".5" alpha=".3" distance="4" />
		</s:filters>
	</s:Group>
	

	<!--
	<s:Ellipse left="0" right="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="{strokeColor}" weight="3" />
		</s:stroke>
	</s:Ellipse>
	-->

	
	
	<s:Group id="iconDisplay" left="3" right="3" top="3" bottom="3" alpha="1" alpha.over="1" alpha.down="1">
	</s:Group>
    

	
    
</s:SparkSkin>
